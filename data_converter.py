import os
import subprocess
import json


def get_all_files_in_directory(directory: str, file_type: str = ""):
    """
    Get all files in a directory if file_type is empty str then find all files
    If not then only the extension. Makes a generator object
    """
    for file in os.listdir(directory):
        if file_type == "":
            yield file
        elif file.endswith(file_type):
            yield file


def convert_all_mkv_to_webm(directory: str):
    """
    Converts all mkv files in a directory to webm and then deletes the mkv
    """
    for file in get_all_files_in_directory(directory, ".mkv"):
        subprocess.run(
            f"ffmpeg -i {directory}/{file} -c:v libvpx -crf 10 -c:a libvorbis {directory}/{file.split('.')[0]}.webm"
        , shell=True)
        os.remove(directory+"/"+file)

def convert_all_mp4_to_webm(directory: str):
    """
    Converts all mp4 files in a directory to webm and then deletes the mp4
    """
    for file in get_all_files_in_directory(directory, ".mp4"):
        subprocess.run(
            f"ffmpeg -i {directory}/{file} -c:v libvpx-vp9 -crf 30 -b:v 0 -c:a libopus {directory}/{file.split('.')[0]}.webm"
        , shell=True)
        # ffmpeg -i infile.mp4 -c:v libsvtav1 -preset 4 -crf 30 -g 240 -pix_fmt yuv420p10le -c:a -b:a 128k libopus outfile.web
        os.remove(directory+"/"+file)


def download_video_data(url: str):
    def convert_description_to_single_line(description):
        return description.replace("\n", " \\n")
    subprocess.run(
        f'yt-dlp --write-info-json -o temp --skip-download {url}',
        shell=True,
    )
    subprocess.run(
        f'yt-dlp --write-info-json -o "metadata_output/%(id)s.%(ext)s" --skip-download {url}',
        shell=True,
    )
    

    video_obj = json.loads(open("temp.info.json", "r", encoding="utf-8").read())
    if "youtube" in url:
        vid_id = video_obj["id"]
        vid_title = video_obj["title"]
        uploader = video_obj["uploader"]
        vid_date = video_obj["upload_date"]
        channel_id = video_obj["channel_id"]
        channel_name = video_obj["channel"]
        description = convert_description_to_single_line(video_obj["description"])
    elif "bilibili" in url:
        vid_id = video_obj["id"]
        vid_title = video_obj["title"]
        uploader = video_obj["uploader"]
        vid_date = video_obj["upload_date"]
        channel_id = video_obj["uploader_id"]
        channel_name = video_obj["uploader"]
        description = convert_description_to_single_line(video_obj["description"])
    vid_date = f"{vid_date[:4]}-{vid_date[4:6]}-{vid_date[6:]}"
    try:
        os.remove("temp.info.json")
    except Exception:
        print("Error removing temp.info.json")
    json_obj = {
        "video_id": vid_id,
        "title": vid_title,
        "channel_id": channel_id,
        "uploader": uploader,
        "upload_date": vid_date,
        "description": description,
        "channel_name": channel_name,
    }
    return json.dumps(json_obj, ensure_ascii=False) + "\n"

def download_subtitles(url: str):
    def get_non_autogenerated_subs(url):
        try:
            output = subprocess.check_output(['yt-dlp', '--list-subs', url], stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as e:
            output = e.output

        output = output.decode('utf-8')
        with open('output.txt', 'w') as f:
            f.write(output)

        output = output.split('\n')

        lines = []
        delete_line = False
        for line in output:
            if line.startswith('[info]'):
                if delete_line:
                    delete_line = False
                else:
                    delete_line = True
            if not delete_line:
                lines.append(line)
            else:
                pass
        output = lines
        output = [line.split()[0] for line in output if "srv3" in line]
        print(output)
        return output
    
    def download_subs(url, subs, video_id):
        print(f'Downloading subtitles for {url}')
        for sub in subs:
            print(f'Downloading {sub} subtitles')
            try:
                output = subprocess.check_output(['yt-dlp', '--sub-format', 'srv3', '--sub-lang', sub, '--write-sub',
                                        '--skip-download', '--output', "subtitles/"+video_id+'/%(id)s' +'.%(ext)s', url], universal_newlines=True)
            except subprocess.CalledProcessError as e:
                print(f'Error downloading subtitle: {e.output}')

    def rename_subtitles(subtitles, video_id):
        for subtitle in subtitles:
            old_name = video_id + '.' + subtitle[0] + '.srv3'
            new_name = video_id + '.' + subtitle[0] + '.srv3'
            if os.path.exists(old_name):
                os.rename(old_name, new_name)

    def parse_video_id(url):
        return url.split('=')[1]

    
    video_id = parse_video_id(url)
    if not os.path.exists(video_id):
        os.mkdir(video_id)
    subtitles = get_non_autogenerated_subs(url)
    download_subs(url, subtitles, video_id)
    rename_subtitles(subtitles, video_id)

def generate_database_row_data(download_list_path: str):
    with open(download_list_path, "r", encoding="utf-8") as f:
        for line in f:
            video_metadata = json.loads(download_video_data(line))
            yield video_metadata

if __name__ == "__main__":
    print(download_video_data("https://www.youtube.com/watch?v=K9EIJl-X_Wo"))